type LolProps = { x: { x: String }, y: Bool, z: String[] };

component NoProps() tsx {
    return <p>no props 2</p>;
}

component ABC() tsx {
    return (<><h1>no props</h1><NoProps/></>);
}

component Lol(props : { x: { x: String }, y: Bool, z: String[]}) tsx {
    const hello = props.y;
    return (
        <>
            <h1>yoo</h1>
            {props.x.x}
            {props.z.map(x => <p>{x}</p>)}
            {props.y ? <p>hello true</h1> : <p>hello false</p>}
            {!hello ? <p>hello true</h1> : <p>hello false</p>}
        </>
    );
}

component Counter(props: { name: String }) tsx {
	const [value, setValue] = useState(0);
	const y = true;
	return (
		<>
			<div>{props.name}: {value}</div>
			<Lol x={{x: "hallo"}} y={true} z={["1", "y"]}/>
			{y ? <p>bool is true</p> : <p>bool is false</p>}
			<button onClick={() => setValue(value + 1)}>Increment</button>
			<button onClick={() => setValue(value - 1)}>Decrement</button>
			<button onClick={() => console.log(x, y)}>Log</button>
		</>
	);
}

template Other4() duckx {
    return <h1>OTHER4</h1>;
}

struct AStruct = {yy: Bool} impl { fn abc() -> String { return "hello from struct"; } };

template Other3(props: {s: String, x: AStruct}) duckx {
    return <><Other4/><Other4/><Other4/><h1 style="background-color: green">{props.x.yy}</h1></>;
}

template Other2(props: {x: Int}) duckx {
    return <div>fiiiiiiiiiiisch {props.x}<Other3 s={"from other2"} x={AStruct{yy: true}}/></div>;
}

template Other(props: {x: Int}) duckx {
    return <><h1>Other {props.x}</h1><Other2 x={0}/><Other2 x={1}/></>;
}

template Page(props: { title: String, x: String[], color: String }) duckx {
    let x = <h1 style="background-color: red">in var</h1>;
    return (
        <>
            <!doctype html>
            <html>
            <body>
            <ABC/>
            <h1>{100}</h1>
            <Other x={100}/>
            {x}
            {<div style="background-color: {props.color}"><Counter name={"lol"}/></div>}
            {.Html[<h1>ich bin eine h1</h1>, <p>ich bin ein p</p>]}
            {.Html[<Counter name={"Counter in loop 1"}/>, <Counter name={"Counter in loop 2"}/>]}

            <p>hallo ich stelle euch heute ein neues Rezept vor</p>
            </body>
            </html>
        </>
    );
}

fn render(renderer: Html) -> String {
    go {
	    env := TemplEnv{[]string{}, []RenderCall{}}
		res := renderer(&env)

		prelude := `
    <script type="module">
    import { h, render } from "https://esm.sh/preact";
    import { useState } from "https://esm.sh/preact/hooks";
    import htm from "https://esm.sh/htm";

    // Initialize htm with Preact
    const html = htm.bind(h);
    `

        for _, e := range env.ClientComponents {
            prelude += e
            prelude += "\n"
        }

        for _, e := range env.RenderCalls {
            prelude += fmt.Sprintf("document.querySelectorAll(\"[duckx-render=\\\"%s\\\"]\").forEach(e => render(html`%s`, e))", e.Id, e.Jsx)
            prelude += "\n"
        }

        prelude += "\n</script>"

		return ConcDuckString { res + prelude }
    }
}

fn main() {
    std::http::serve_string("/", render(Page({title: "yo", x: .String[], color: "green"})));
    std::http::listen(8080);
}
