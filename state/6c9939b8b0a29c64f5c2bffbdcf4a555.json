{
    "id": "6c9939b8b0a29c64f5c2bffbdcf4a555",
    "file_path": "../../src/parse/source_file_parser.rs",
    "line_number": 1228,
    "title": "respect the new way to create structs",
    "tag": "todo",
    "module_tag": "parse",
    "user": "@Apfelfrosch",
    "issue_ref": null,
    "description": "(\nSourceFile {\ntype_definitions: vec![TypeDefinition {\nname: mangle(&[\"abc\", \"TestStruct\"]),\ntype_expression: TypeExpr::Struct(StructDefinition {\nname: \"TestStruct\",\nfields: vec![Field {\nname: \"recv\".into(),\ntype_expr: TypeExpr::TypeName(\nfalse,\nmangle(&[\"abc\", \"TestStruct\"]),\nNone,\n)\n.into_empty_span(),\n}],\nmethods: vec![],\ngenerics: None,\n})\n.into_empty_span(),\ngenerics: None,\n}],\nuse_statements: vec![UseStatement::Go(\"fmt\".into(), None)],\nfunction_definitions: vec![\nFunctionDefintion {\nname: mangle(&[\"abc\", \"lol\", \"im_a_func\"]),\nvalue_expr: ValueExpr::Block(vec![\nValueExpr::FunctionCall {\ntarget: ValueExpr::Variable(\ntrue,\nmangle(&[\"abc\", \"lol\", \"called\"]),\nNone,\n)\n.into_empty_span()\n.into(),\nparams: vec![],\ntype_params: None,\n}\n.into_empty_span(),\n])\n.into_empty_span(),\n..Default::default()\n},\nFunctionDefintion {\nname: mangle(&[\"abc\", \"im_calling_a_sub_module\"]),\nvalue_expr: ValueExpr::Block(vec![\nValueExpr::Variable(true, mangle(&[\"abc\", \"lol\", \"called\"]), None)\n.into_empty_span(),\n])\n.into_empty_span(),\n..Default::default()\n},\nFunctionDefintion {\nname: mangle(&[\"abc\", \"lol\", \"called\"]),\nvalue_expr: ValueExpr::Block(vec![\nValueExpr::FunctionCall {\ntarget: ValueExpr::Variable(\ntrue,\nmangle(&[\"abc\", \"lol\", \"called\"]),\nNone,\n)\n.into_empty_span()\n.into(),\nparams: vec![],\ntype_params: None,\n}\n.into_empty_span(),\n])\n.into_empty_span(),\n..Default::default()\n},\n],\n..Default::default()\n},\nSourceFile {\nsub_modules: vec![\n(\n\"abc\".into(),\nSourceFile {\nuse_statements: vec![UseStatement::Regular(\nfalse,\nvec![\nIndicator::Module(\"lol\".into()),\nIndicator::Symbols(vec![\"called\".into()]),\n],\n)],\ntype_definitions: vec![TypeDefinition {\nname: \"TestStruct\".into(),\ntype_expression: TypeExpr::Struct(StructDefinition {\nfields: vec![Field {\n\nname: \"recv\".into(),\ntype_expr: TypeExpr::RawTypeName(\nfalse,\nvec![\"TestStruct\".into()],\nNone,\n)\n.into_empty_span(),\n}],\n})\n.into_empty_span(),\ngenerics: None,\n}],\nfunction_definitions: vec![FunctionDefintion {\nname: \"im_calling_a_sub_module\".into(),\nvalue_expr: ValueExpr::Block(vec![\nValueExpr::RawVariable(false, vec![\"called\".into()])\n.into_empty_span(),\n])\n.into_empty_span(),\n..Default::default()\n}],\nsub_modules: vec![(\n\"lol\".into(),\nSourceFile {\nuse_statements: vec![UseStatement::Go(\"fmt\".into(), None)],\nfunction_definitions: vec![\nFunctionDefintion {\nname: \"im_a_func\".into(),\nvalue_expr: ValueExpr::Block(vec![\nValueExpr::FunctionCall {\ntarget: ValueExpr::RawVariable(\nfalse,\nvec![\"called\".into()],\n)\n.into_empty_span()\n.into(),\nparams: vec![],\ntype_params: None,\n}\n.into_empty_span(),\n])\n.into_empty_span(),\n..Default::default()\n},\nFunctionDefintion {\nname: \"called\".into(),\nvalue_expr: ValueExpr::Block(vec![\nValueExpr::FunctionCall {\ntarget: ValueExpr::RawVariable(\nfalse,\nvec![\"called\".into()],\n)\n.into_empty_span()\n.into(),\nparams: vec![],\ntype_params: None,\n}\n.into_empty_span(),\n])\n.into_empty_span(),\n..Default::default()\n},\n],\n..SourceFile::default()\n},\n)],\n..SourceFile::default()\n},\n),\n(\n\"xyz\".into(),\nSourceFile {\nsub_modules: vec![(\"foo\".into(), SourceFile::default())],\n..SourceFile::default()\n},\n),\n],\n..Default::default()\n},\n),\n(\nSourceFile::default(),\nSourceFile {\nsub_modules: vec![(\"empty\".into(), SourceFile::default())],\n..Default::default()\n},\n),\n(\nSourceFile {\nfunction_definitions: vec![FunctionDefintion {\nname: \"single_my_single_fun\".into(),\n..Default::default()\n}],\n..Default::default()\n},\nSourceFile {\nsub_modules: vec![\n(\"empty\".into(), SourceFile::default()),\n(\n\"single\".into(),\nSourceFile {\nfunction_definitions: vec![FunctionDefintion {\nname: \"my_single_fun\".into(),\n..Default::default()\n}],\n..Default::default()\n},\n),\n],\n..Default::default()\n},\n),\n(\nSourceFile {\nfunction_definitions: vec![\nFunctionDefintion {\nname: \"multiple_some_abc_func\".into(),\nvalue_expr: ValueExpr::String(\"Hello from module\".into())\n.into_empty_span_and_block(),\n..Default::default()\n},\nFunctionDefintion {\nname: \"multiple_some_xyz_func\".into(),\nvalue_expr: ValueExpr::Int(1).into_empty_span_and_block(),\n..Default::default()\n},\n],\n..Default::default()\n},\nSourceFile {\nsub_modules: vec![(\n\"multiple\".into(),\nSourceFile {\nfunction_definitions: vec![\nFunctionDefintion {\nname: \"some_abc_func\".into(),\nvalue_expr: ValueExpr::String(\"Hello from module\".into())\n.into_empty_span_and_block(),\n..Default::default()\n},\nFunctionDefintion {\nname: \"some_xyz_func\".into(),\nvalue_expr: ValueExpr::Int(1).into_empty_span_and_block(),\n..Default::default()\n},\n],\n..Default::default()\n},\n)],\n..Default::default()\n},\n),\n(\nSourceFile {\nfunction_definitions: vec![\nFunctionDefintion {\nname: \"multiple_some_abc_func\".into(),\nvalue_expr: ValueExpr::String(\"Hello from module\".into())\n.into_empty_span_and_block(),\n..Default::default()\n},\nFunctionDefintion {\nname: \"multiple_some_xyz_func\".into(),\nvalue_expr: ValueExpr::Int(1).into_empty_span_and_block(),\n..Default::default()\n},\nFunctionDefintion {\nname: \"nested_hello_from_x\".into(),\n..Default::default()\n},\nFunctionDefintion {\nname: \"nested_level1_hello_from_y\".into(),\n..Default::default()\n},\nFunctionDefintion {\nname: \"nested_level1_level2_hello_from_z\".into(),\n..Default::default()\n},\n],\n..Default::default()\n},\nSourceFile {\nsub_modules: vec![\n(\n\"multiple\".into(),\nSourceFile {\nfunction_definitions: vec![\nFunctionDefintion {\nname: \"some_abc_func\".into(),\nvalue_expr: ValueExpr::String(\"Hello from module\".into())\n.into_empty_span_and_block(),\n..Default::default()\n},\nFunctionDefintion {\nname: \"some_xyz_func\".into(),\nvalue_expr: ValueExpr::Int(1).into_empty_span_and_block(),\n..Default::default()\n},\n],\n..Default::default()\n},\n),\n(\n\"nested\".into(),\nSourceFile {\nfunction_definitions: vec![FunctionDefintion {\nname: \"hello_from_x\".into(),\n..Default::default()\n}],\nsub_modules: vec![(\n\"level1\".into(),\nSourceFile {\nfunction_definitions: vec![FunctionDefintion {\nname: \"hello_from_y\".into(),\n..Default::default()\n}],\nsub_modules: vec![(\n\"level2\".into(),\nSourceFile {\nfunction_definitions: vec![FunctionDefintion {\nname: \"hello_from_z\".into(),\n..Default::default()\n}],\n..Default::default()\n},\n)],\n..Default::default()\n},\n)],\n..Default::default()\n},\n),\n(\"empty\".into(), SourceFile::default()),\n(\"another_mod\".into(), SourceFile::default()),\n],\n..Default::default()\n},\n),",
    "blame": {
        "name": "Maurice Schmidt",
        "email": "mvmogo@gmail.com"
    },
    "source_line": "// todo(@Apfelfrosch): respect the new way to create structs",
    "status": "open",
    "first_seen": "2025-09-04T13:57:50.801408",
    "history": []
}