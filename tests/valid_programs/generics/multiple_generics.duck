use go "fmt";

struct Pair<A, B> = {
    a: A,
    b: B,
} impl {
    fn get_a() -> A { return self.a; }
    fn get_b() -> B { return self.b; }
    fn get_both() -> (A, B) { return (self.a, self.b); }

    fn replace_a<NewA>(new_a: NewA) -> Pair<NewA, B> {
        return Pair<NewA, B> {
            a: new_a,
            b: self.b,
        };
    }

    fn replace_b<NewB>(new_b: NewB) -> Pair<A, NewB> {
        return Pair<A, NewB> {
            a: self.a,
            b: new_b,
        };
    }

    fn replace_both<NewA, NewB>(new_a: NewA, new_b: NewB) -> Pair<NewA, NewB> {
        return Pair<NewA, NewB> {
            a: new_a,
            b: new_b,
        };
    }

    fn replace_both2<NewA, NewB>(new_a: NewA, new_b: NewB) -> Pair<NewA, NewB> {
        let first: Pair<NewA, B> = self.replace_a<NewA>(new_a);
        let second: Pair<A, NewB> = self.replace_b<NewB>(new_b);

        return Pair<NewA, NewB> {
            a: first.a,
            b: second.b,
        };
    }
};

fn print_with_go(x: {}) {
    go {
        fmt.Println(x)
    }
}

type PairWhereFirstIsInt<B> = Pair<Int, B>;
type PairWhereFirstIsInt2<X> = Pair<Int, X>;

fn main() {
    let int_string_pair: Pair<Int, String> = Pair<Int, String> { a: 100, b: "a string" };
    let int_string_pair2: PairWhereFirstIsInt<String> = PairWhereFirstIsInt<String> { a: 100, b: "a string" };
    let int_string_pair3: PairWhereFirstIsInt2<String> = PairWhereFirstIsInt2<String> { a: 100, b: "a string" };

    print_with_go(int_string_pair);
    print_with_go(int_string_pair2);
    print_with_go(int_string_pair3);
    print_with_go(int_string_pair3.replace_a<Bool>(true));
    print_with_go(int_string_pair3.replace_b<Bool>(true));
    print_with_go(int_string_pair3.replace_both<Float, Bool>(1.0, true));
    print_with_go(int_string_pair3.replace_both2<Float, Bool>(100.0, false));
}
