type Person = {
    name: String,
    age: Int,
    address: Address | .none,
};

type Address = {
    street: String,
    city: String,
};

fn describe_person(person: Person) -> String {
    match person {
        Person @p if p.age < 18 => f"Minor: {p.name}",
        Person @p if p.age >= 65 => f"Senior: {p.name}",
        Person @p => match p.address {
            Address @addr => f"Adult: {p.name} from {addr.city}",
            .none => f"Adult: {p.name} (no address)",
        },
    }
}

fn main() {
    std::io::println("Testing nested pattern matching with guards");

    let person1: Person = {
        name: "Alice",
        age: 25,
        address: {
            street: "123 Main St",
            city: "New York",
        },
    };

    std::io::println("Person 1: Alice, age 25, with address");
    std::io::println("Expected: 'Adult: Alice from New York'");
    std::io::println("Actual:");
    describe_person(person1)->std::io::println();

    let person2: Person = {
        name: "Bob",
        age: 16,
        address: .none,
    };

    std::io::println("Person 2: Bob, age 16, no address");
    std::io::println("Expected: 'Minor: Bob'");
    std::io::println("Actual:");
    describe_person(person2)->std::io::println();
}
