fn parse_int(s: String) -> Int | String {
    if s == "" {
        return "Empty string";
    } else {
        return std::string::to_int(s);
    }
}

fn process_number(input: String) -> Int | String {
    let parsed: Int | String = parse_int(input);
    match parsed {
        Int @value => return value * 2,
        String @error => return f"Parse error: {error}",
    }
}

fn main() {
    std::io::println("Testing error propagation");
    std::io::println("Testing process_number('42') - should succeed");
    std::io::println("Expected result: 84 (42 * 2)");

    let result1: Int | String = process_number("42");

    std::io::println("Actual result:");
    match result1 {
        Int @value => value->std::string::from_int()->std::io::println(),
        String @error => error->std::io::println(),
    }

    std::io::println("Testing process_number('') - should fail");
    std::io::println("Expected result: 'Parse error: Empty string'");

    let result2: Int | String = process_number("");

    std::io::println("Actual result:");
    match result2 {
        Int @value => value->std::string::from_int()->std::io::println(),
        String @error => error->std::io::println(),
    }
}
